@inject IProductService _productService
@implements IDisposable

@if (_productService.Products is null || !_productService.Products.Any())
{
    <span>@_productService.Message</span>
}
else
{
    <ul class="list-unstyled">
       @foreach (var product in _productService.Products)
       {
           <li class="media my-3">
               <div class="media-img-wrapper me-2">
                   <a href="product/@product.Id">
                       <img class="media-img" src="@product.ImageUrl" alt="@product.Title">
                   </a>
               </div>
               <div class="media-body">
                   <a href="product/@product.Id">
                       <h4 class="mb-0">@product.Title</h4>
                   </a>
                   <p>@product.Description</p>
                   <h5 class="price">
                       @GetPriceText(product)
                   </h5>
               </div>
           </li>
       }
    </ul>
}

@code {

    protected override void OnInitialized() =>
        _productService.ProductsChanged += StateHasChanged;

    public void Dispose() =>
        _productService.ProductsChanged -= StateHasChanged;

    private string GetPriceText(Product product)
    {
        if (product.Variants.Count == 0)
            return string.Empty;
        else if (product.Variants.Count == 1)
            return $"${product.Variants[0].Price}";
        else
            return $"Starting at ${product.Variants.Min(x => x.Price)}";
    }

}
