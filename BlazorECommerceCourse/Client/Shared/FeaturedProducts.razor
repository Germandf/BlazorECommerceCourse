@inject IProductService _productService
@implements IDisposable

<center><h2>Today's Featured Products</h2></center>
@if (_productService.Products is null || !_productService.Products.Any())
{
    <span>@_productService.Message</span>
}
else
{
    <div class="container">
        @foreach (var product in _productService.Products)
        {
            @if (product.Featured)
            {
                <div class="featured-product">
                    <div>
                        <a href="product/@product.Id">
                            @if (!string.IsNullOrEmpty(product.ImageUrl))
                            {
                                <img src="@product.ImageUrl" />
                            }
                            else if (product.Images.Count > 0)
                            {
                                <img src="@product.Images[0].Data" />
                            }
                        </a>
                        <h4><a href="product/@product.Id">@product.Title</a></h4>
                        @if (product.Variants is not null && product.Variants.Any())
                        {
                            <h5 class="price">
                                $@product.Variants[0].Price
                            </h5>
                        }
                    </div>
                </div>
            }
        }
    </div>
}

@code {

    protected override void OnInitialized() =>
        _productService.ProductsChanged += StateHasChanged;

    public void Dispose() =>
        _productService.ProductsChanged -= StateHasChanged;

}
