@page "/product/{id:int}"
@inject IProductService _productService
@inject ICartService _cartService

@if(_product is null)
{
    <span>@_message</span>
}
else
{
    <div class="media">
        <div class="media-img-wrapper-big mr-2">
            @if (!string.IsNullOrEmpty(_product.ImageUrl)) 
            {
                <img class="media-img-big" src="@_product.ImageUrl" alt="@_product.Title" />
            }
            else 
            {
                <MudCarousel Class="mud-width-full" ItemsSource="@_product.Images" Style="height: 200px;">
                    <ItemTemplate>
                        <MudImage Src="@context.Data" />
                    </ItemTemplate>
                </MudCarousel>
            }
        </div>
        <div class="media-body">
            <h2 class="mb-0">@_product.Title</h2>
            <p>@_product.Description</p>
            @if (_product.Variants is not null && _product.Variants.Any())
            {
                <div class="mb-3">
                    <select class="form-select" @bind="_currentTypeId">
                        @foreach (var variant in _product.Variants)
                        {
                            <option value="@variant.ProductTypeId">@variant.ProductType.Name</option>
                        }
                    </select>
                </div>
            }
            @if (GetSelectedVariant() is not null)
            {
                @if (GetSelectedVariant()!.OriginalPrice > GetSelectedVariant()!.Price)
                {
                    <h6 class="text-muted original-price">@GetSelectedVariant()!.OriginalPrice</h6>
                }
                <h4 class="price">$@GetSelectedVariant()!.Price</h4>
            }
            <button class="btn btn-primary" @onclick="AddToCart">
                <i class="oi oi-cart"></i>&nbsp;&nbsp;&nbsp;Add to cart
            </button>
        </div>
    </div>
}

@code {

    private Product? _product = null;
    private string _message = string.Empty;
    private int _currentTypeId = 1;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _message = "Loading product...";
        var result = await _productService.GetProduct(Id);
        if (!result.Success)
            _message = result.Message;
        else if (result.Data is not null)
        {
            _product = result.Data;
            if (_product.Variants.Any())
                _currentTypeId = _product.Variants[0].ProductTypeId;
        }

    }

    private ProductVariant? GetSelectedVariant() =>
        _product is null ? null : _product.Variants.FirstOrDefault(x => x.ProductTypeId == _currentTypeId);

    private async Task AddToCart()
    {
        var productVariant = GetSelectedVariant();
        if(productVariant is not null)
        {
            var cartItem = new CartItem()
            {
                ProductId = productVariant.ProductId,
                ProductTypeId = productVariant.ProductTypeId
            };
            await _cartService.AddToCart(cartItem);
        }
    }
}
