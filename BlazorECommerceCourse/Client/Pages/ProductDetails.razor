@page "/product/{id:int}"
@inject IProductService _productService

@if(_product is null)
{
    <span>@_message</span>
}
else
{
    <div class="media">
        <div class="media-img-wrapper-big mr-2">
            <img class="media-img-big" src="@_product.ImageUrl" alt="@_product.Title" />
        </div>
        <div class="media-body">
            <h2 class="mb-0">@_product.Title</h2>
            <p>@_product.Description</p>
            @if (GetSelectedVariant() is not null)
            {
                @if (GetSelectedVariant()!.OriginalPrice > GetSelectedVariant()!.Price)
                {
                    <h6 class="text-muted original-price">@GetSelectedVariant()!.OriginalPrice</h6>
                }
                <h4 class="price">$@GetSelectedVariant()!.Price</h4>
            }
        </div>
    </div>
}

@code {

    private Product? _product = null;
    private string _message = string.Empty;
    private int _currentTypeId = 1;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _message = "Loading product...";
        var result = await _productService.GetProduct(Id);
        if (!result.Success)
            _message = result.Message;
        else if (result.Data is not null)
        {
            _product = result.Data;
            if (_product.Variants.Count > 0)
                _currentTypeId = _product.Variants[0].ProductTypeId;
        }

    }

    private ProductVariant? GetSelectedVariant() =>
        _product is null ? null : _product.Variants.FirstOrDefault(x => x.ProductTypeId == _currentTypeId);
    

}
