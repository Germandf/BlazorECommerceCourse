@page "/login"
@inject IAuthService _authService
@inject ILocalStorageService _localStorage
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authenticationStateProvider
@inject ICartService _cartService

<PageTitle>Login</PageTitle>

<h3>Login</h3>

<EditForm Model="_user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="_user.Email" />
        <ValidationMessage For="() => _user.Email" />
    </div>
    <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" class="form-control" type="password" @bind-Value="_user.Password" />
        <ValidationMessage For="() => _user.Password" />
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
    <div class="text-danger">
        <span>@_errorMessage</span>
    </div>
</EditForm>

@code {

    [Parameter]
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    private UserLogin _user = new();
    private string _errorMessage = "";

    private async Task HandleLogin()
    {
        var result = await _authService.Login(_user);
        if (result.Success)
        {
            _errorMessage = "";
            await _localStorage.SetItemAsync("authToken", result.Data);
            await _authenticationStateProvider.GetAuthenticationStateAsync();
            await _cartService.StoreCartItems(true);
            await _cartService.GetCartItemsCount();
            _navigationManager.NavigateTo(ReturnUrl ?? "");
        }
        else
        {
            _errorMessage = result.Message;
        }
    }

}
